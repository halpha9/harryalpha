'use strict';

var _templateObject;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
var jsxRuntime = require('react/jsx-runtime');
var ui = require('@sanity/ui');
var styled = require('styled-components');
var icons = require('@sanity/icons');
require('react');
require('sanity');
var desk = require('./desk-a4a6c841.js');
require('sanity/router');
var PaneItem = require('./PaneItem-8ae995e8.js');
require('lodash');
require('@sanity/util/paths');
var index = require('./index-7ca32889.js');
require('rxjs');
require('rxjs/operators');
require('react-copy-to-clipboard');
require('react-rx');
require('@sanity/types');
require('@sanity/uuid');
require('react-is');
require('nanoid');
require('@sanity/generate-help-url');
require('is-hotkey');
require('@sanity/schema/_internal');
require('@rexxars/react-json-inspector');
require('hashlru');
require('framer-motion');
function _interopDefaultLegacy(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    'default': e
  };
}
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
const Divider = styled__default["default"].hr(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n"])));
function ListPane(props) {
  const {
    childItemId,
    index: index$1,
    isActive,
    isSelected,
    pane,
    paneKey
  } = props;
  const {
    features
  } = index.useDeskTool();
  const {
    collapsed: layoutCollapsed
  } = desk.usePaneLayout();
  const {
    defaultLayout,
    displayOptions,
    items,
    menuItems,
    menuItemGroups,
    title
  } = pane;
  const paneShowIcons = displayOptions == null ? void 0 : displayOptions.showIcons;
  const shouldShowIconForItem = item => {
    var _a;
    const itemShowIcon = (_a = item.displayOptions) == null ? void 0 : _a.showIcon;
    if (typeof itemShowIcon !== "undefined") {
      return itemShowIcon !== false;
    }
    return paneShowIcons !== false;
  };
  return /* @__PURE__ */jsxRuntime.jsxs(desk.Pane, {
    currentMaxWidth: 350,
    "data-testid": "desk-tool-list-pane",
    id: paneKey,
    maxWidth: 640,
    minWidth: 320,
    selected: isSelected,
    children: [desk._DEBUG, /* @__PURE__ */jsxRuntime.jsx(desk.PaneHeader, {
      actions: /* @__PURE__ */jsxRuntime.jsx(desk.PaneHeaderActions, {
        menuItems,
        menuItemGroups
      }),
      backButton: features.backButton && index$1 > 0 && /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
        as: desk.BackLink,
        "data-as": "a",
        icon: icons.ArrowLeftIcon,
        mode: "bleed"
      }),
      title
    }), /* @__PURE__ */jsxRuntime.jsx(desk.PaneContent, {
      overflow: layoutCollapsed ? void 0 : "auto",
      children: /* @__PURE__ */jsxRuntime.jsx(ui.Stack, {
        padding: 2,
        space: 1,
        children: items && items.map((item, itemIndex) => {
          if (item.type === "divider") {
            return /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
              paddingY: 1,
              children: /* @__PURE__ */jsxRuntime.jsx(Divider, {})
            }, "divider-".concat(itemIndex));
          }
          const pressed = !isActive && childItemId === item.id;
          const selected = isActive && childItemId === item.id;
          return /* @__PURE__ */jsxRuntime.jsx(PaneItem.PaneItem, {
            icon: shouldShowIconForItem(item) ? item.icon : false,
            id: item.id,
            layout: defaultLayout,
            pressed,
            schemaType: item.schemaType,
            selected,
            title: item.title,
            value: item._id && item.schemaType ? {
              _id: item._id,
              _type: item.schemaType.name,
              title: item.title
            } : void 0
          }, item.id);
        })
      })
    })]
  });
}
exports["default"] = ListPane;
//# sourceMappingURL=index-effb696b.js.map
